        - 
        - ## forward evaluation 
        - function evaluate(tt::TT_TYPE,idx::IDX_TYPE, vvals::TV_TYPE, pvals::TV_TYPE)
        - 	# debug("enter - ",idx)
        - 	# assert(idx != 0)	
        - 	ret::VV_TYPE = 0.0
        - 	ntype = tt[idx] #type node
        - 	idx -= 1
        - 	if(ntype == TYPE_P)
        - 		ret = pvals[tt[idx]]
        - 		idx -=1
        - 	elseif(ntype == TYPE_V)
        - 		ret = vvals[tt[idx]]
        - 		idx -= 1
        - 	# elseif(ntype == TYPE_OU)
        - 	# 	oc = tt[idx]
        - 	# 	assert(U_OP_START <= oc <= U_OP_END)
        - 	# 	idx -= 1
        - 	# 	lidx = tt[idx]
        - 	# 	idx -= 1
        - 	# 	# debug("unary before  - ",lidx)
        - 	# 	(lval,idx) = evaluate(tt,lidx,vvals,pvals)
        - 	# 	ret = evaluate(OP[oc],lval)
        - 	# elseif(ntype == TYPE_OB)
        - 	# 	oc = tt[idx]
        - 	# 	assert(B_OP_START<= oc <= B_OP_END)
        - 	# 	idx -= 1
        - 	# 	ridx = tt[idx]
        - 	# 	idx -= 1
        - 	# 	lidx = tt[idx]
        - 	# 	idx -= 1
        - 	# 	# debug("before right - ",ridx)
        - 	# 	(rval,idx) = evaluate(tt,ridx,vvals,pvals)
        - 	# 	# debug("before left - ",lidx)
        - 	# 	(lval,idx) = evaluate(tt,lidx,vvals,pvals)
        - 	# 	ret = evaluate(OP[oc],lval,rval)
        - 	else
        - 		num = ntype - 2
        - 		oc = tt[idx]
        - 		idx -= 1
        - 		# assert(oc==1 || oc ==3) #:+ or :* symbol
        - 		ovals = Array{VV_TYPE,1}()
        - 		nidx = 0
        - 		for i = 1:1:num
        - 			oidx = tt[idx]
        - 			idx -= 1
        - 			(rval,nidx) = evaluate(tt,oidx,vvals,pvals)
        - 			push!(ovals,rval)
        - 		end
        - 		idx = nidx
        - 		# @show OP[oc]
        - 		ret = evaluate(OP[oc],ovals...)
        - 		# assert(false)
        - 	end
        - 
        - 	# assert(!isnan(ret))
        - 	# debug("exit - ",idx)
        - 	return ret,idx
        - end
        - 
        - function forward_evaluate(tt::TT_TYPE, vals::TV_TYPE, nvals::TV_TYPE, vvals::TV_TYPE, pvals::TV_TYPE)
        - 	# vals = Array{VV_TYPE,1}()
 11799630 	idx = 1::IDX_TYPE
        0 	while(idx <= length(tt))
        - 		# @show idx
        0 		ntype = tt[idx]
        0 		idx += 1
        0 		if(ntype == TYPE_P)
    22400 			v = pvals[tt[idx]]
        0 			idx += 1
      128 			push!(vals,v)
        0 			idx += 1 #skip TYPE_P
        0 		elseif(ntype == TYPE_V)
    12800 			v = vvals[tt[idx]]
        0 			idx += 1
     4192 			push!(vals,v)
        0 			idx += 1 #skip TYPE_V
        0 		elseif(ntype == TYPE_O)
        0 			empty!(nvals)
        0 			oc = tt[idx]
        0 			idx += 1
        0 			n = tt[idx]
        0 			idx += 1
        0 			idx += 1 #skip TYPE_O
        - 			# s = OP[oc]
        0 			while n>0
   388352 				prepend!(nvals,[pop!(vals)])
        0 				n -= 1
        - 			end
        - 			
        - 			# @show OP[oc]
        - 			# @show nvals
        - 
        0 			if(OP[oc] == :+)
     9616 				v = Base.sum(nvals)
        0 			elseif(OP[oc] == :-)
        0 				v = (-)(nvals[1],nvals[2])
        0 			elseif(OP[oc] == :*)
     6400 				v = Base.prod(nvals)
        0 			elseif(OP[oc] == :/)
        0 				v =  (/)(nvals[1],nvals[2])
        0 			elseif(OP[oc] == :^)
     6400 				v =  (^)(nvals[1],nvals[2])
        0 			elseif(OP[oc] == :sin)
        0 				v =  sin(nvals[1])
        0 			elseif(OP[oc] == :cos)
     6400 				v =  cos(nvals[1])
        - 			end
        - 			# @show v
        0 			push!(vals,v)
        - 		else
        0 			assert(false)
        - 		end
        - 	end
        - 	# @show vals
        0 	return pop!(vals)
        - end
        - 
        - @eval 	function evaluate(oc, args...)
        - 			s = OP[oc]
        - 			out = Expr(:if)
        - 			comp = Expr(:comparison)
        - 
        - 			if(s == :+)
        - 				return (+)(args...)
        - 			elseif(s == :-)
        - 				return (-)(args...)
        - 			elseif(s == :*)
        - 				return (*)(args...)
        - 			elseif(s == :/)
        - 				return (/)(args...)
        - 			elseif(s == :^)
        - 				return (^)(args...)
        - 			elseif(s == :sin)
        - 				return sin(args...)
        - 			elseif(s == :cos)
        - 				return cos(args...)
        - 			end
        - 		end
        - 
        - ## Interface method
        - function feval(tt::TT_TYPE, vvals::TV_TYPE, pvals::TV_TYPE)
        - 	# (val::Float64,idx) = evaluate(tt,length(tt),vvals, pvals)
        0 	val = forward_evaluate(tt, TV_TYPE(), TV_TYPE(),vvals,pvals)
        0 	return val
        - end
        - 
